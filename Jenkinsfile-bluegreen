// Define our variables at the top level
def CURRENT_APP, NEXT_APP, CURRENT_COLOR, NEXT_COLOR

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/AayushKumar1144/ai-companion.git', branch: 'main'
            }
        }

        stage('Inject Secrets') {
            steps {
                withCredentials([
                    string(credentialsId: 'firebase-config-json', variable: 'FIREBASE_SECRET_DATA'),
                    string(credentialsId: 'gemini-api-key', variable: 'GEMINI_SECRET_DATA')
                ]) {
                    script {
                        echo 'Injecting Firebase and Gemini API Keys...'
                        def htmlContent = readFile 'index.html'
                        htmlContent = htmlContent.replace('__FIREBASE_CONFIG_PLACEHOLDER__', FIREBASE_SECRET_DATA)
                        htmlContent = htmlContent.replace('__GEMINI_KEY_PLACEHOLDER__', GEMINI_SECRET_DATA)
                        writeFile file: 'index.html', text: htmlContent
                        echo 'Secrets injected successfully.'
                    }
                }
            }
        }
        
        stage('Determine Blue/Green State') {
            steps {
                script {
                    echo "Checking which version is currently live..."
                    // We check the LOCAL blue-green.conf file
                    try {
                        // *** THIS LINE IS NOW CORRECTED ***
                        def config = readFile 'blue-green.conf' 
                        if (config.contains('server blue:80')) {
                            echo "LIVE version is BLUE. Deploying GREEN."
                            CURRENT_APP = "blue"
                            CURRENT_COLOR = "blue"
                            NEXT_APP = "green"
                            NEXT_COLOR = "green"
                        } else {
                            throw new Exception("Config is not blue")
                        }
                    } catch (Exception e) {
                        // If file not found or config is not blue, we deploy BLUE
                        echo "LIVE version is GREEN (or proxy not found). Deploying BLUE."
                        CURRENT_APP = "green"
                        CURRENT_COLOR = "green"
                        NEXT_APP = "blue"
                        NEXT_COLOR = "blue"
                    }
                }
            }
        }
        
        stage('Build & Deploy INACTIVE Version') {
            steps {
                script {
                    echo "Building new image for ${NEXT_COLOR}..."
                    sh "docker-compose build --build-arg VERSION_COLOR=${NEXT_COLOR} ${NEXT_APP}"
                    
                    echo "Deploying new ${NEXT_COLOR} container..."
                    sh "docker-compose up -d --no-deps ${NEXT_APP} nginx-proxy"
                }
            }
        }

        stage('Switch Traffic to INACTIVE') {
            steps {
                script {
                    echo "Switching live traffic to ${NEXT_COLOR}..."
                    
                    // *** THIS LINE IS NOW CORRECTED ***
                    sh "sed -i 's/server ${CURRENT_COLOR}:80/server ${NEXT_COLOR}:80/' blue-green.conf"
                    
                    // 2. Tell the Nginx proxy to reload
                    sh "docker exec nginx-proxy nginx -s reload"
                    
                    echo "Traffic switched. ${NEXT_COLOR} is now LIVE."
                }
            }
        }

        stage('Stop OLD Version') {
            steps {
                script {
                    echo "Stopping old ${CURRENT_COLOR} container..."
                    sh "docker-compose stop ${CURRENT_APP}"
                }
            }
        }
    } // End stages

    post {
        always {
            // We removed cleanWs() to prevent the error
            echo 'Pipeline finished.'
        }
    }
}