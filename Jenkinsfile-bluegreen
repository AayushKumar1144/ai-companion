pipeline {
    agent any

    // This environment block is now ONLY for our deployment logic
    environment {
        CURRENT_APP = ""
        NEXT_APP = ""
        CURRENT_COLOR = ""
        NEXT_COLOR = ""
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/AayushKumar1144/ai-companion.git', branch: 'main'
            }
        }

        // THIS STAGE IS RE-WRITTEN TO FIX THE ERROR
        stage('Inject Secrets') {
            steps {
                // We load the secrets directly into variables here
                // This is a more robust method
                withCredentials([
                    string(credentialsId: 'firebase-config-json', variable: 'FIREBASE_SECRET_DATA'),
                    string(credentialsId: 'gemini-api-key', variable: 'GEMINI_SECRET_DATA')
                ]) {
                    // Now we use the new variables
                    script {
                        echo 'Injecting Firebase and Gemini API Keys...'
                        def htmlContent = readFile 'index.html'

                        htmlContent = htmlContent.replace('__FIREBASE_CONFIG_PLACEHOLDER__', FIREBASE_SECRET_DATA)
                        htmlContent = htmlContent.replace('__GEMINI_KEY_PLACEHOLDER__', GEMINI_SECRET_DATA)

                        writeFile file: 'index.html', text: htmlContent
                        echo 'Secrets injected successfully.'
                    }
                }
            }
        }

        stage('Determine Blue/Green State') {
            steps {
                script {
                    echo "Checking which version is currently live..."
                    def result = sh(script: "docker exec nginx-proxy cat /etc/nginx/nginx.conf | grep 'server blue:80'", returnStatus: true)

                    if (result == 0) {
                        echo "LIVE version is BLUE. Deploying GREEN."
                        env.CURRENT_APP = "ai-companion-blue"
                        env.CURRENT_COLOR = "blue"
                        env.NEXT_APP = "ai-companion-green"
                        env.NEXT_COLOR = "green"
                    } else {
                        echo "LIVE version is GREEN. Deploying BLUE."
                        env.CURRENT_APP = "ai-companion-green"
                        env.CURRENT_COLOR = "green"
                        env.NEXT_APP = "ai-companion-blue"
                        env.NEXT_COLOR = "blue"
                    }
                }
            }
        }

        stage('Build & Deploy INACTIVE Version') {
            steps {
                script {
                    echo "Building new image for ${env.NEXT_COLOR}..."
                    sh "docker-compose build --build-arg VERSION_COLOR=${env.NEXT_COLOR} ${env.NEXT_APP}"

                    echo "Deploying new ${env.NEXT_COLOR} container..."
                    sh "docker-compose up -d --no-deps ${env.NEXT_APP} nginx-proxy"
                }
            }
        }

        stage('Switch Traffic to INACTIVE') {
            steps {
                script {
                    echo "Switching live traffic to ${env.NEXT_COLOR}..."
                    sh "sed -i 's/server ${env.CURRENT_COLOR}:80/server ${env.NEXT_COLOR}:80/' nginx.conf"
                    sh "docker exec nginx-proxy nginx -s reload"
                    echo "Traffic switched. ${env.NEXT_COLOR} is now LIVE."
                }
            }
        }

        stage('Stop OLD Version') {
            steps {
                script {
                    echo "Stopping old ${env.CURRENT_COLOR} container..."
                    sh "docker stop ${env.CURRENT_APP}"
                }
            }
        }
    } // End stages

    post {
        always {
            cleanWs()
            echo 'Workspace cleaned.'
        }
    }
}